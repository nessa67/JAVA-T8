
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author LabInfo
 */
public class TelaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public TelaPrincipal() {
        initComponents();
        atualizarTabela();
// Adiciona o listener de seleção à tabela
        tabelaPessoas.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) { // Evita duplicação de eventos
                carregarDadosSelecionados();
            }
        });
    }

    //Adicione este método para preencher os campos quando uma linha é selecionada:
    private void carregarDadosSelecionados() {
        int linhaSelecionada = tabelaPessoas.getSelectedRow();
        if (linhaSelecionada >= 0) { // Se uma linha foi selecionada
// Obtém os dados da linha selecionada
            int id = (int) tabelaPessoas.getValueAt(linhaSelecionada, 0);
            String nome = (String) tabelaPessoas.getValueAt(linhaSelecionada, 1);
            int idade = (int) tabelaPessoas.getValueAt(linhaSelecionada, 2);
            double salario = (double) tabelaPessoas.getValueAt(linhaSelecionada, 3);
// Preenche os campos
            txtNome.setText(nome);
            txtIdade.setText(String.valueOf(idade));
            txtSalario.setText(String.valueOf(salario));
        }
    }

    private void atualizarTabela() {
        DefaultTableModel model = (DefaultTableModel) tabelaPessoas.getModel();
        model.setRowCount(0); // Limpa a tabela
        List<Pessoa> pessoas = PessoaDAO.listar();
        for (Pessoa p : pessoas) {
            model.addRow(new Object[]{
                p.getId(),
                p.getNome(),
                p.getIdade(),
                p.getSalario()
            });
        }
    }

    private void limparCampos() {
        txtNome.setText("");
        txtIdade.setText("");
        txtSalario.setText("");
    }

    private double calcularMedia(double[] valores) {
        double soma = 0;
        for (double valor : valores) {
            soma += valor;
        }
        return soma / valores.length;
    }

    private int calcularMedia(int[] valores) {
        int soma = 0;
        for (int valor : valores) {
            soma += valor;
        }
        return soma / valores.length;
    }

    private double encontrarMaior(double[] valores) {
        double maior = valores[0];
        for (double valor : valores) {
            if (valor > maior) {
                maior = valor;
            }
        }
        return maior;
    }

    private void exibirRelatorio(Object[][] dados) {
        JFrame frameRelatorio = new JFrame("Relatório Completo");
        JTable tabelaRelatorio = new JTable(dados, new String[]{"", "", "", ""});
// Desabilita edição
        tabelaRelatorio.setDefaultEditor(Object.class, null);
// Rolagem
        JScrollPane scrollPane = new JScrollPane(tabelaRelatorio);
        frameRelatorio.add(scrollPane);
        frameRelatorio.setSize(600, 400);
        frameRelatorio.setLocationRelativeTo(null);
        frameRelatorio.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaPessoas = new javax.swing.JTable();
        btnInserir = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        btnRelatorio = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtIdade = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSalario = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cadastro Pessoas");

        tabelaPessoas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "NOME", "IDADE", "SALÁRIO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaPessoas);

        btnInserir.setText("Inserir");
        btnInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInserirActionPerformed(evt);
            }
        });

        btnAtualizar.setText("Atualizar");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        btnRelatorio.setText("Relatórios");
        btnRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRelatorioActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        jLabel1.setText("Nome");

        jLabel2.setText("Idade");

        jLabel3.setText("Salário");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnInserir)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(26, 26, 26)
                                        .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2))
                                        .addGap(27, 27, 27)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtIdade, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(btnAtualizar)
                                .addGap(18, 18, 18)
                                .addComponent(btnRelatorio)
                                .addGap(18, 18, 18)
                                .addComponent(btnExcluir))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIdade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInserir)
                    .addComponent(btnAtualizar)
                    .addComponent(btnExcluir)
                    .addComponent(btnRelatorio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInserirActionPerformed
        try {
            // 1. Obter e validar campos não vazios
            String nome = txtNome.getText().trim();
            if (nome.isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "O campo Nome é obrigatório!",
                        "Erro", JOptionPane.ERROR_MESSAGE);
                txtNome.requestFocus();
                return;
            }
            // 2. Validar idade
            if (txtIdade.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "O campo Idade é obrigatório!",
                        "Erro", JOptionPane.ERROR_MESSAGE);
                txtIdade.requestFocus();
                return;
            }
            // 3. Validar salário
            if (txtSalario.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "O campo Salário é obrigatório!",
                        "Erro", JOptionPane.ERROR_MESSAGE);
                txtSalario.requestFocus();
                return;
            }
            // 4. Converter e validar tipos numéricos
            int idade;
            double salario;
            try {
                idade = Integer.parseInt(txtIdade.getText().trim());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this,
                        "Idade deve ser um número inteiro válido!",
                        "Erro", JOptionPane.ERROR_MESSAGE);
                txtIdade.requestFocus();
                return;
            }
            try {
                salario = Double.parseDouble(txtSalario.getText().trim());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this,
                        "Salário deve ser um número válido!\nUse ponto como separador decimal.",
                        "Erro", JOptionPane.ERROR_MESSAGE);
                txtSalario.requestFocus();
                return;
            }
            // 5. Tentar criar e inserir a pessoa (validações adicionais ocorrerão no construtor)
            Pessoa novaPessoa = new Pessoa(0, nome, idade, salario);
            PessoaDAO.inserir(novaPessoa);
            // 6. Atualizar interface
            atualizarTabela();
            limparCampos();
            JOptionPane.showMessageDialog(this,
                    "Cadastro realizado com sucesso!",
                    "Sucesso", JOptionPane.INFORMATION_MESSAGE);
        } catch (IllegalArgumentException e) {
            // Captura exceções lançadas pelo construtor de Pessoa
            JOptionPane.showMessageDialog(this,
                    e.getMessage(),
                    "Erro de Validação", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnInserirActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        int linhaSelecionada = tabelaPessoas.getSelectedRow();
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione uma pessoa para atualizar!");
            return;
        }
        try {
            int id = (int) tabelaPessoas.getValueAt(linhaSelecionada, 0);
            String nome = txtNome.getText();
            int idade = Integer.parseInt(txtIdade.getText());
            double salario = Double.parseDouble(txtSalario.getText());
            PessoaDAO.atualizar(new Pessoa(id, nome, idade, salario));
            atualizarTabela();
            limparCampos();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Idade e salário devem ser números válidos!");
        }
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void btnRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRelatorioActionPerformed
        List<Pessoa> pessoas = PessoaDAO.listar();
        if (pessoas.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nenhum dado para gerar relatório!");
            return;
        }
        // 1. USO DE VETORES para cálculos estatísticos
        double[] salarios = new double[pessoas.size()];
        int[] idades = new int[pessoas.size()];
        for (int i = 0; i < pessoas.size(); i++) {
            salarios[i] = pessoas.get(i).getSalario();
            idades[i] = pessoas.get(i).getIdade();
        }
        // Cálculos estatísticos
        double mediaSalarial = calcularMedia(salarios);
        double maiorSalario = encontrarMaior(salarios);
        int mediaIdade = calcularMedia(idades);
        // 2. USO DE MATRIZ para relatório completo
        // Calcula o tamanho necessário: 5 linhas de cabeçalho + 1 linha de separação + Nlinhas de dados
        int totalLinhas = 5 + 1 + pessoas.size();
        Object[][] dadosRelatorio = new Object[totalLinhas][4];
        // Cabeçalho
        dadosRelatorio[0][0] = "RELATÓRIO DE PESSOAS";
        dadosRelatorio[1][0] = "Total de registros: " + pessoas.size();
        dadosRelatorio[2][0] = "Média salarial: " + String.format("R$ %.2f", mediaSalarial);
        dadosRelatorio[2][1] = "Maior salário: " + String.format("R$ %.2f", maiorSalario);
        dadosRelatorio[3][0] = "Média de idade: " + mediaIdade + " anos";
        // Linha em branco para separar (linha 4)
        dadosRelatorio[4][0] = "--- DETALHES ---";
        // Cabeçalho da tabela (linha 5)
        dadosRelatorio[5][0] = "ID";
        dadosRelatorio[5][1] = "Nome";
        dadosRelatorio[5][2] = "Idade";
        dadosRelatorio[5][3] = "Salário";
        // Dados das pessoas (começando da linha 6)
        for (int i = 0; i < pessoas.size(); i++) {
            Pessoa p = pessoas.get(i);
            dadosRelatorio[i + 6][0] = p.getId();
            dadosRelatorio[i + 6][1] = p.getNome();
            dadosRelatorio[i + 6][2] = p.getIdade();
            dadosRelatorio[i + 6][3] = p.getSalario();
        }
        // Exibir relatório em uma nova janela
        exibirRelatorio(dadosRelatorio);
    }//GEN-LAST:event_btnRelatorioActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        int linha = tabelaPessoas.getSelectedRow();
        if (linha < 0) {
            JOptionPane.showMessageDialog(this,
                    "Selecione um registro na tabela para excluir",
                    "Nenhum selecionado",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        // Obtém todos os dados da linha selecionada
        int id = (int) tabelaPessoas.getValueAt(linha, 0);
        String nome = (String) tabelaPessoas.getValueAt(linha, 1);
        int idade = (int) tabelaPessoas.getValueAt(linha, 2);
        double salario = (double) tabelaPessoas.getValueAt(linha, 3);
        // Cria uma mensagem formatada
        String mensagem = String.format(
                "<html><b>Confirmar exclusão do registro?</b><br><br>"
                + "<table>"
                + "<tr><td><b>ID:</b></td><td>%d</td></tr>"
                + "<tr><td><b>Nome:</b></td><td>%s</td></tr>"
                + "<tr><td><b>Idade:</b></td><td>%d anos</td></tr>"
                + "<tr><td><b>Salário:</b></td><td>R$ %.2f</td></tr>"
                + "</table></html>",
                id, nome, idade, salario
        );
        int resposta = JOptionPane.showConfirmDialog(
                this,
                mensagem,
                "Confirmação de Exclusão",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );
        if (resposta == JOptionPane.YES_OPTION) {
            try {
                PessoaDAO.excluir(id);
                atualizarTabela();
                JOptionPane.showMessageDialog(this,
                        "Registro excluído com sucesso!",
                        "Sucesso",
                        JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                        "Erro ao excluir registro: " + e.getMessage(),
                        "Erro",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnInserir;
    private javax.swing.JButton btnRelatorio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaPessoas;
    private javax.swing.JTextField txtIdade;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtSalario;
    // End of variables declaration//GEN-END:variables
}
